{
  "address": "0xB45E9Dad573Ac59f61b05d06B8cc59728B5b9E6F",
  "abi": [
    {
      "inputs": [],
      "name": "moduleType",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_metadata",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_message",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf82cdcd197b9a49db17180f1d0dda41fdcf362dbebf24b8459887b174e7bfda9",
  "receipt": {
    "to": null,
    "from": "0x19d96301865fdD07427db3c445508A051BC6D352",
    "contractAddress": "0xB45E9Dad573Ac59f61b05d06B8cc59728B5b9E6F",
    "transactionIndex": 3,
    "gasUsed": "129253",
    "logsBloom": "0x
    "blockHash": "0x8ebb9846a86f0f52b13151b998bbf56d4c9dc5c7dcdf441218151d9240f530b6",
    "transactionHash": "0xf82cdcd197b9a49db17180f1d0dda41fdcf362dbebf24b8459887b174e7bfda9",
    "logs": [],
    "blockNumber": 30121078,
    "cumulativeGasUsed": "388845",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "50860595ff8fdce7f0c6fc051a5407b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"moduleType\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_message\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"moduleType()\":{\"details\":\"Relayers infer how to fetch and format metadata.\"},\"verify(bytes,bytes)\":{\"params\":{\"_message\":\"Hyperlane encoded interchain message\",\"_metadata\":\"Off-chain metadata provided by a relayer, specific to the security model encoded by the module (e.g. validator signatures)\"},\"returns\":{\"_0\":\"True if the message was verified\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"moduleType()\":{\"notice\":\"Returns an enum that represents the type of security model encoded by this ISM.\"},\"verify(bytes,bytes)\":{\"notice\":\"Defines a security model responsible for verifying interchain messages based on the provided metadata.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ISM/IEmptyIsm.sol\":\"EmptyIsm\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"contracts/ISM/IEmptyIsm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\nimport \\\"./IInterchainSecurityModule.sol\\\";\\n\\ncontract EmptyIsm is IInterchainSecurityModule {\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8) {\\n        return 6;\\n    }\\n\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x8a940bc7b779efae85476a88c21377ede231f213a072ad4babdc957491084d3b\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/ISM/IInterchainSecurityModule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity >=0.6.11;\\n\\ninterface IInterchainSecurityModule {\\n    /**\\n     * @notice Returns an enum that represents the type of security model\\n     * encoded by this ISM.\\n     * @dev Relayers infer how to fetch and format metadata.\\n     */\\n    function moduleType() external view returns (uint8);\\n\\n    /**\\n     * @notice Defines a security model responsible for verifying interchain\\n     * messages based on the provided metadata.\\n     * @param _metadata Off-chain metadata provided by a relayer, specific to\\n     * the security model encoded by the module (e.g. validator signatures)\\n     * @param _message Hyperlane encoded interchain message\\n     * @return True if the message was verified\\n     */\\n    function verify(\\n        bytes calldata _metadata,\\n        bytes calldata _message\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xb9662352b2d1ce49d5e06177c8f839ebd0b40408c189e80b1f90c5fcdd85a8ee\",\"license\":\"MIT OR Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610160806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80636465e69f1461003b578063f7e83aee1461004f575b600080fd5b604051600681526020015b60405180910390f35b61006761005d3660046100bf565b6001949350505050565b6040519015158152602001610046565b60008083601f84011261008957600080fd5b5081356001600160401b038111156100a057600080fd5b6020830191508360208285010111156100b857600080fd5b9250929050565b600080600080604085870312156100d557600080fd5b84356001600160401b03808211156100ec57600080fd5b6100f888838901610077565b9096509450602087013591508082111561011157600080fd5b5061011e87828801610077565b9598949750955050505056fea2646970667358221220610b8b419369a28f871e455940347d545367a91200f8c54f7c6a6cc4129f261b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c80636465e69f1461003b578063f7e83aee1461004f575b600080fd5b604051600681526020015b60405180910390f35b61006761005d3660046100bf565b6001949350505050565b6040519015158152602001610046565b60008083601f84011261008957600080fd5b5081356001600160401b038111156100a057600080fd5b6020830191508360208285010111156100b857600080fd5b9250929050565b600080600080604085870312156100d557600080fd5b84356001600160401b03808211156100ec57600080fd5b6100f888838901610077565b9096509450602087013591508082111561011157600080fd5b5061011e87828801610077565b9598949750955050505056fea2646970667358221220610b8b419369a28f871e455940347d545367a91200f8c54f7c6a6cc4129f261b64736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "moduleType()": {
        "details": "Relayers infer how to fetch and format metadata."
      },
      "verify(bytes,bytes)": {
        "params": {
          "_message": "Hyperlane encoded interchain message",
          "_metadata": "Off-chain metadata provided by a relayer, specific to the security model encoded by the module (e.g. validator signatures)"
        },
        "returns": {
          "_0": "True if the message was verified"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "moduleType()": {
        "notice": "Returns an enum that represents the type of security model encoded by this ISM."
      },
      "verify(bytes,bytes)": {
        "notice": "Defines a security model responsible for verifying interchain messages based on the provided metadata."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}